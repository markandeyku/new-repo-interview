
2Ô∏è‚É£ Difference between HTTPS, SSL, TLS, and mTLS
 | Term                               | Description                                                     | Use Case                                          |
 | ---------------------------------- | --------------------------------------------------------------- | ------------------------------------------------- |
 | **SSL (Secure Sockets Layer)**     | Legacy protocol to encrypt communication                        | Mostly deprecated, replaced by TLS                |
 | **TLS (Transport Layer Security)** | Modern protocol for encrypted client-server communication       | Web apps, APIs                                    |
 | **HTTPS**                          | HTTP over TLS                                                   | Browsers, APIs                                    |
 | **mTLS (Mutual TLS)**              | Both client & server authenticate each other using certificates | Service-to-service communication in microservices |

3Ô∏è‚É£ What is SecurityFilterChain in Spring Security 5+?

    Definition: A chain of filters that intercept HTTP requests and enforce security rules.
    Replaces legacy WebSecurityConfigurerAdapter in Spring Security 5.7+
    Each filter handles a specific concern: authentication, authorization, CSRF, CORS, headers, etc.
    Example:
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf().disable()
            .authorizeHttpRequests()
            .requestMatchers("/admin/**").hasRole("ADMIN")
            .anyRequest().authenticated()
            .and()
            .oauth2ResourceServer()
            .jwt();
        return http.build();
    }

    Interview Tip:

    Explain how filters execute in order ‚Üí first authentication, then authorization, then CSRF/CORS.

4Ô∏è‚É£ What is CSRF and how does Spring Security prevent it?

    CSRF (Cross-Site Request Forgery):
    Attack where a malicious site tricks a user‚Äôs browser to make unwanted requests (like fund transfer)
    to a trusted site where the user is authenticated.
    Prevention in Spring Security:

    Spring Security enables CSRF protection by default for stateful applications.
    Mechanism:

    Generates a CSRF token for the user session.
    Token must be sent with each state-changing request (POST, PUT, DELETE).
    Server validates token ‚Üí prevents malicious requests.
    For stateless APIs (JWT, microservices):
    CSRF protection can be disabled since tokens are sent in headers, not cookies.  ---- imp for microservice

5Ô∏è‚É£ What is CORS and how do you configure it securely?
    CORS (Cross-Origin Resource Sharing):
    Browser security feature restricting requests from different origins.
    Why needed:
    Microservices often serve front-end apps hosted on different domains.
    Spring Security Configuration:

    Only allow trusted origins.
    Avoid wildcard * for credentials.
    Limit allowed methods and headers to reduce attack surface.


6Ô∏è‚É£ How do you prevent SQL Injection and XSS in Spring applications?

    SQL Injection:
    Use parameterized queries / PreparedStatement:
    jdbcTemplate.update("INSERT INTO users(name) VALUES (?)", user.getName());
    Avoid string concatenation for queries.
    For JPA/Hibernate, use JPQL with parameters or Criteria API.

    XSS (Cross-Site Scripting):
    Occurs when malicious scripts are injected in user input.

    Prevention techniques:
    Encode outputs in HTML templates (th:text in Thymeleaf).
    Validate and sanitize user inputs.
    Use libraries like OWASP Java Encoder.
    Bonus: Use Spring Security headers for extra protection:




üîπ HTTP (HyperText Transfer Protocol)

Protocol: Used for communication between web browsers and servers.

Port: Default is 80.

Security: üö´ Not secure ‚Äî data is sent in plain text, so attackers can eavesdrop.

Encryption: None.

Use cases: Non-sensitive sites (old blogs, simple APIs, test servers).

Speed: Slightly faster than HTTPS (no encryption overhead).

üîπ HTTPS (HyperText Transfer Protocol Secure)

Protocol: Secure version of HTTP with encryption via SSL/TLS.

Port: Default is 443.

Security: ‚úÖ Secure ‚Äî protects data with:

Encryption (prevents eavesdropping)

Authentication (verifies server identity via SSL certificate)

Integrity (detects data tampering).

Encryption: Uses SSL/TLS certificates.

Use cases: Banking, payments, login forms, e-commerce, APIs ‚Äî basically everything today.

Speed: Slight overhead due to encryption, but modern TLS is optimized (often negligible).

SEO: Google ranks HTTPS sites higher.

üîë Key Differences Table:
Feature	HTTP	HTTPS
Full Form	HyperText Transfer Protocol	HyperText Transfer Protocol Secure
Port	80	443
Security	Not secure (plain text)	Secure (SSL/TLS encryption)
Encryption	‚ùå None	‚úÖ Yes
Data Integrity	‚ùå Not ensured	‚úÖ Ensured
Authentication	‚ùå Not verified	‚úÖ Verified (via certificate)
Performance	Slightly faster	Slightly slower (but negligible with modern TLS)
SEO Ranking	Lower	Higher
Browser Label	‚ÄúNot Secure‚Äù warning	üîí Lock icon

‚úÖ In practice:
Today, almost all production websites must use HTTPS. Modern browsers (Chrome, Firefox, Safari) even warn users if a site is on plain HTTP.